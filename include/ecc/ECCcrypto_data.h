/*
 * Copyright 2019-2020 NXP
 */

/*
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 *   Neither the name of the copyright holder nor the names of its contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES;  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON  ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 *
 * @file ECCcrypto_data.h
 *
 * @brief Test patterns for all crypto tests
 *
 */

#ifndef ECC_CRYPTO_DATA_H
#define ECC_CRYPTO_DATA_H

#include "vtest.h"

/* Curve domain parameters */
/** 32 bytes for 256-bit Elliptic Curve Domain Parameter */
#define LENGTH_DOMAIN_PARAMS_256 32
/** 48 bytes for 384-bit Elliptic Curve Domain Parameter */
#define LENGTH_DOMAIN_PARAMS_384 48
/** 64 bytes for 512-bit Elliptic Curve Domain Parameter */
#define LENGTH_DOMAIN_PARAMS_512 64

/** Size of "message" for hash */
#define HASH_MSG_SIZE         7

/* Dataset for signature verification tests */
/** Message is "message" */
static uint8_t test_ver_msg[HASH_MSG_SIZE] = {
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65
};
/** 256-related dataset */
/** Hash of "message" */
static uint8_t test_ver_hash_256[LENGTH_DOMAIN_PARAMS_256] = {
#ifdef ECC_PATTERNS_BIG_ENDIAN
	0xab, 0x53, 0x0a, 0x13, 0xe4, 0x59, 0x14, 0x98,
	0x2b, 0x79, 0xf9, 0xb7, 0xe3, 0xfb, 0xa9, 0x94,
	0xcf, 0xd1, 0xf3, 0xfb, 0x22, 0xf7, 0x1c, 0xea,
	0x1a, 0xfb, 0xf0, 0x2b, 0x46, 0x0c, 0x6d, 0x1d
#else
	0x1d, 0x6d, 0x0c, 0x46, 0x2b, 0xf0, 0xfb, 0x1a,
	0xea, 0x1c, 0xf7, 0x22, 0xfb, 0xf3, 0xd1, 0xcf,
	0x94, 0xa9, 0xfb, 0xe3, 0xb7, 0xf9, 0x79, 0x2b,
	0x98, 0x14, 0x59, 0xe4, 0x13, 0x0a, 0x53, 0xab
#endif
};
/** nistp256 */
/** Public key x coordinate for verification*/
static uint8_t test_ver_pubKey_x_nistp256[LENGTH_DOMAIN_PARAMS_256] = {
#ifdef ECC_PATTERNS_BIG_ENDIAN
	0x3a, 0x6d, 0x9e, 0x56, 0x68, 0xcd, 0x4c, 0x1f,
	0x80, 0x93, 0x14, 0x18, 0x4e, 0x6a, 0x40, 0x7b,
	0x5e, 0xfb, 0x2c, 0x38, 0x4d, 0xc4, 0x67, 0xc4,
	0x0a, 0x98, 0x3e, 0xd9, 0x62, 0xbb, 0xa8, 0xc6
#else
	0xc6, 0xa8, 0xbb, 0x62, 0xd9, 0x3e, 0x98, 0x0a,
	0xc4, 0x67, 0xc4, 0x4d, 0x38, 0x2c, 0xfb, 0x5e,
	0x7b, 0x40, 0x6a, 0x4e, 0x18, 0x14, 0x93, 0x80,
	0x1f, 0x4c, 0xcd, 0x68, 0x56, 0x9e, 0x6d, 0x3a
#endif
};
/** Public key y coordinate for verification */
static uint8_t test_ver_pubKey_y_nistp256[LENGTH_DOMAIN_PARAMS_256] = {
#ifdef ECC_PATTERNS_BIG_ENDIAN
	0x97, 0x2d, 0x5f, 0xc2, 0x93, 0x81, 0xc0, 0x52,
	0xe6, 0xd9, 0xbd, 0x4e, 0xe3, 0x5a, 0x7a, 0x66,
	0x17, 0xf6, 0x22, 0xd4, 0x7c, 0x79, 0x9b, 0x7b,
	0x73, 0xe7, 0xd1, 0xeb, 0xe6, 0xa2, 0x2a, 0x05
#else
	0x05, 0x2a, 0xa2, 0xe6, 0xeb, 0xd1, 0xe7, 0x73,
	0x7b, 0x9b, 0x79, 0x7c, 0xd4, 0x22, 0xf6, 0x17,
	0x66, 0x7a, 0x5a, 0xe3, 0x4e, 0xbd, 0xd9, 0xe6,
	0x52, 0xc0, 0x81, 0x93, 0xc2, 0x5f, 0x2d, 0x97
#endif
};
/** Signature r value to verify*/
static uint8_t test_ver_sign_r_nistp256[LENGTH_DOMAIN_PARAMS_256] = {
#ifdef ECC_PATTERNS_BIG_ENDIAN
	0x91, 0x4b, 0xe9, 0xff, 0x9d, 0x52, 0x35, 0x93,
	0x51, 0x0c, 0xc1, 0x6f, 0xc8, 0x9f, 0x9a, 0x4e,
	0x21, 0x98, 0x8d, 0x7a, 0x1c, 0x4a, 0xda, 0xa6,
	0x1d, 0x2b, 0xce, 0x83, 0x22, 0x9e, 0x5d, 0x73
#else
	0x73, 0x5d, 0x9e, 0x22, 0x83, 0xce, 0x2b, 0x1d,
	0xa6, 0xda, 0x4a, 0x1c, 0x7a, 0x8d, 0x98, 0x21,
	0x4e, 0x9a, 0x9f, 0xc8, 0x6f, 0xc1, 0x0c, 0x51,
	0x93, 0x35, 0x52, 0x9d, 0xff, 0xe9, 0x4b, 0x91
#endif
};
/** Signature s value to verify*/
static uint8_t test_ver_sign_s_nistp256[LENGTH_DOMAIN_PARAMS_256] = {
#ifdef ECC_PATTERNS_BIG_ENDIAN
	0xe6, 0x7a, 0x26, 0x64, 0x6f, 0xfd, 0x86, 0x44,
	0x39, 0xc8, 0x6b, 0x93, 0xde, 0xd1, 0x34, 0xef,
	0x6f, 0xe5, 0x64, 0xcb, 0xf1, 0x2e, 0x8b, 0xea,
	0x39, 0x6e, 0xa4, 0x57, 0x03, 0xe4, 0x14, 0x20
#else
	0x20, 0x14, 0xe4, 0x03, 0x57, 0xa4, 0x6e, 0x39,
	0xea, 0x8b, 0x2e, 0xf1, 0xcb, 0x64, 0xe5, 0x6f,
	0xef, 0x34, 0xd1, 0xde, 0x93, 0x6b, 0xc8, 0x39,
	0x44, 0x86, 0xfd, 0x6f, 0x64, 0x26, 0x7a, 0xe6
#endif
};

/** bp256r1 */
/** Public key x coordinate for verification*/
static uint8_t test_ver_pubKey_x_bp256r1[LENGTH_DOMAIN_PARAMS_256] = {
#ifdef ECC_PATTERNS_BIG_ENDIAN
	0xa9, 0x15, 0xcf, 0xe8, 0xeb, 0x46, 0x21, 0x32,
	0xaf, 0x22, 0xd7, 0xf2, 0x7f, 0x6d, 0x9d, 0xce,
	0x3e, 0xc8, 0x19, 0xf0, 0xc0, 0x63, 0x65, 0x3f,
	0x7c, 0xba, 0x3f, 0x94, 0x0a, 0x4a, 0xb3, 0xdf
#else
	0xdf, 0xb3, 0x4a, 0x0a, 0x94, 0x3f, 0xba, 0x7c,
	0x3f, 0x65, 0x63, 0xc0, 0xf0, 0x19, 0xc8, 0x3e,
	0xce, 0x9d, 0x6d, 0x7f, 0xf2, 0xd7, 0x22, 0xaf,
	0x32, 0x21, 0x46, 0xeb, 0xe8, 0xcf, 0x15, 0xa9
#endif
};
/** Public key y coordinate for verification */
static uint8_t test_ver_pubKey_y_bp256r1[LENGTH_DOMAIN_PARAMS_256] = {
#ifdef ECC_PATTERNS_BIG_ENDIAN
	0x1a, 0xde, 0x51, 0xfe, 0x78, 0x94, 0xeb, 0xe6,
	0x1b, 0xc7, 0x2d, 0xca, 0x7a, 0x16, 0x58, 0x54,
	0x36, 0xcc, 0xc7, 0x4a, 0xba, 0x60, 0x0b, 0x24,
	0xbd, 0x3b, 0xc4, 0x46, 0xe1, 0x65, 0x85, 0x0c
#else
	0x0c, 0x85, 0x65, 0xe1, 0x46, 0xc4, 0x3b, 0xbd,
	0x24, 0x0b, 0x60, 0xba, 0x4a, 0xc7, 0xcc, 0x36,
	0x54, 0x58, 0x16, 0x7a, 0xca, 0x2d, 0xc7, 0x1b,
	0xe6, 0xeb, 0x94, 0x78, 0xfe, 0x51, 0xde, 0x1a
#endif
};
/** Signature r value to verify*/
static uint8_t test_ver_sign_r_bp256r1[LENGTH_DOMAIN_PARAMS_256] = {
#ifdef ECC_PATTERNS_BIG_ENDIAN
	0x67, 0xd9, 0xe9, 0x63, 0x5f, 0x2d, 0xcc, 0x2c,
	0x6d, 0x2c, 0x60, 0x40, 0xb9, 0x72, 0x59, 0x39,
	0x54, 0x0b, 0x5b, 0x55, 0x99, 0x33, 0xe3, 0x03,
	0xb8, 0xa6, 0x02, 0xda, 0x72, 0x57, 0x67, 0x5e
#else
	0x5e, 0x67, 0x57, 0x72, 0xda, 0x02, 0xa6, 0xb8,
	0x03, 0xe3, 0x33, 0x99, 0x55, 0x5b, 0x0b, 0x54,
	0x39, 0x59, 0x72, 0xb9, 0x40, 0x60, 0x2c, 0x6d,
	0x2c, 0xcc, 0x2d, 0x5f, 0x63, 0xe9, 0xd9, 0x67
#endif
};
/** Signature s value to verify*/
static uint8_t test_ver_sign_s_bp256r1[LENGTH_DOMAIN_PARAMS_256] = {
#ifdef ECC_PATTERNS_BIG_ENDIAN
	0x57, 0x0f, 0x2d, 0xf1, 0x00, 0x72, 0x22, 0x1d,
	0x8c, 0xe0, 0x21, 0x3a, 0xbd, 0x23, 0xf5, 0x5e,
	0x57, 0x78, 0xc1, 0x67, 0x26, 0x7a, 0xc4, 0xff,
	0x9b, 0x51, 0xc1, 0xea, 0x01, 0x73, 0x22, 0xbf
#else
	0xbf, 0x22, 0x73, 0x01, 0xea, 0xc1, 0x51, 0x9b,
	0xff, 0xc4, 0x7a, 0x26, 0x67, 0xc1, 0x78, 0x57,
	0x5e, 0xf5, 0x23, 0xbd, 0x3a, 0x21, 0xe0, 0x8c,
	0x1d, 0x22, 0x72, 0x00, 0xf1, 0x2d, 0x0f, 0x57
#endif
};

/** 384-related dataset */
/** Hash of "message" */
static uint8_t test_ver_hash_384[LENGTH_DOMAIN_PARAMS_384] = {
#ifdef ECC_PATTERNS_BIG_ENDIAN
	0x35, 0x3e, 0xb7, 0x51, 0x6a, 0x27, 0xef, 0x92,
	0xe9, 0x6d, 0x1a, 0x31, 0x97, 0x12, 0xd8, 0x4b,
	0x90, 0x2e, 0xaa, 0x82, 0x88, 0x19, 0xe5, 0x3a,
	0x8b, 0x09, 0xaf, 0x70, 0x28, 0x10, 0x3a, 0x99,
	0x78, 0xba, 0x8f, 0xeb, 0x61, 0x61, 0xe3, 0x3c,
	0x36, 0x19, 0xc5, 0xda, 0x4c, 0x46, 0x66, 0xa5
#else
	0xa5, 0x66, 0x46, 0x4c, 0xda, 0xc5, 0x19, 0x36,
	0x3c, 0xe3, 0x61, 0x61, 0xeb, 0x8f, 0xba, 0x78,
	0x99, 0x3a, 0x10, 0x28, 0x70, 0xaf, 0x09, 0x8b,
	0x3a, 0xe5, 0x19, 0x88, 0x82, 0xaa, 0x2e, 0x90,
	0x4b, 0xd8, 0x12, 0x97, 0x31, 0x1a, 0x6d, 0xe9,
	0x92, 0xef, 0x27, 0x6a, 0x51, 0xb7, 0x3e, 0x35
#endif
};
/** bp384r1 */
/** Public key x coordinate for verification*/
static uint8_t test_ver_pubKey_x_bp384r1[LENGTH_DOMAIN_PARAMS_384] = {
#ifdef ECC_PATTERNS_BIG_ENDIAN
	0x15, 0x95, 0x16, 0x9a, 0x48, 0x2f, 0x68, 0x0f,
	0x35, 0x56, 0x67, 0x89, 0x19, 0x90, 0x93, 0xa0,
	0xae, 0x56, 0x7f, 0x87, 0x7d, 0x86, 0xa5, 0x40,
	0x16, 0xa5, 0xf1, 0x73, 0x1d, 0x50, 0x3e, 0xe6,
	0x48, 0xd6, 0x1b, 0x6a, 0xa7, 0xfc, 0x64, 0xda,
	0x91, 0xba, 0xdf, 0x35, 0x4f, 0x40, 0x69, 0xcc
#else
	0xcc, 0x69, 0x40, 0x4f, 0x35, 0xdf, 0xba, 0x91,
	0xda, 0x64, 0xfc, 0xa7, 0x6a, 0x1b, 0xd6, 0x48,
	0xe6, 0x3e, 0x50, 0x1d, 0x73, 0xf1, 0xa5, 0x16,
	0x40, 0xa5, 0x86, 0x7d, 0x87, 0x7f, 0x56, 0xae,
	0xa0, 0x93, 0x90, 0x19, 0x89, 0x67, 0x56, 0x35,
	0x0f, 0x68, 0x2f, 0x48, 0x9a, 0x16, 0x95, 0x15
#endif
};
/** Public key y coordinate for verification */
static uint8_t test_ver_pubKey_y_bp384r1[LENGTH_DOMAIN_PARAMS_384] = {
#ifdef ECC_PATTERNS_BIG_ENDIAN
	0x69, 0x6f, 0x22, 0xf7, 0xc4, 0x5d, 0x0a, 0x90,
	0x33, 0x31, 0xd7, 0xc7, 0x25, 0xf8, 0x86, 0x36,
	0x36, 0x66, 0x0d, 0x8a, 0x16, 0xcb, 0x59, 0x72,
	0x1d, 0x3c, 0xd7, 0x4d, 0x21, 0xbc, 0xe9, 0x3e,
	0x77, 0x20, 0x99, 0x11, 0x18, 0x7c, 0x6d, 0x42,
	0xa0, 0x94, 0xa0, 0x25, 0xaa, 0x73, 0x2b, 0xee
#else
	0xee, 0x2b, 0x73, 0xaa, 0x25, 0xa0, 0x94, 0xa0,
	0x42, 0x6d, 0x7c, 0x18, 0x11, 0x99, 0x20, 0x77,
	0x3e, 0xe9, 0xbc, 0x21, 0x4d, 0xd7, 0x3c, 0x1d,
	0x72, 0x59, 0xcb, 0x16, 0x8a, 0x0d, 0x66, 0x36,
	0x36, 0x86, 0xf8, 0x25, 0xc7, 0xd7, 0x31, 0x33,
	0x90, 0x0a, 0x5d, 0xc4, 0xf7, 0x22, 0x6f, 0x69
#endif
};
/** Signature r value to verify*/
static uint8_t test_ver_sign_r_bp384r1[LENGTH_DOMAIN_PARAMS_384] = {
#ifdef ECC_PATTERNS_BIG_ENDIAN
	0x6b, 0x16, 0xca, 0x7c, 0xfe, 0x03, 0xd3, 0x12,
	0xf5, 0xe0, 0xce, 0x4b, 0xef, 0x2d, 0x36, 0xfa,
	0x9f, 0x46, 0x7e, 0x20, 0x45, 0xe4, 0x62, 0x05,
	0xef, 0x8d, 0x96, 0x0d, 0x3d, 0xf3, 0x34, 0xc4,
	0x8a, 0x84, 0x4a, 0x18, 0x19, 0x19, 0xd7, 0xf4,
	0x5e, 0x20, 0x8e, 0x0b, 0x6f, 0x9c, 0x15, 0xc3
#else
	0xc3, 0x15, 0x9c, 0x6f, 0x0b, 0x8e, 0x20, 0x5e,
	0xf4, 0xd7, 0x19, 0x19, 0x18, 0x4a, 0x84, 0x8a,
	0xc4, 0x34, 0xf3, 0x3d, 0x0d, 0x96, 0x8d, 0xef,
	0x05, 0x62, 0xe4, 0x45, 0x20, 0x7e, 0x46, 0x9f,
	0xfa, 0x36, 0x2d, 0xef, 0x4b, 0xce, 0xe0, 0xf5,
	0x12, 0xd3, 0x03, 0xfe, 0x7c, 0xca, 0x16, 0x6b
#endif
};
/** Signature s value to verify*/
static uint8_t test_ver_sign_s_bp384r1[LENGTH_DOMAIN_PARAMS_384] = {
#ifdef ECC_PATTERNS_BIG_ENDIAN
	0x45, 0xaa, 0xd3, 0xbb, 0xb6, 0x20, 0x1d, 0xb1,
	0x6e, 0x54, 0xbe, 0xa4, 0x63, 0xf1, 0xc9, 0xa5,
	0xa5, 0x85, 0xb0, 0x6c, 0x5f, 0x19, 0x89, 0x21,
	0x6e, 0x10, 0x65, 0x39, 0xde, 0x18, 0x6c, 0x54,
	0xd4, 0xd9, 0x34, 0xe6, 0x79, 0x3f, 0xb4, 0x59,
	0x35, 0x03, 0x0f, 0xfd, 0xdc, 0x10, 0x08, 0x7d
#else
	0x7d, 0x08, 0x10, 0xdc, 0xfd, 0x0f, 0x03, 0x35,
	0x59, 0xb4, 0x3f, 0x79, 0xe6, 0x34, 0xd9, 0xd4,
	0x54, 0x6c, 0x18, 0xde, 0x39, 0x65, 0x10, 0x6e,
	0x21, 0x89, 0x19, 0x5f, 0x6c, 0xb0, 0x85, 0xa5,
	0xa5, 0xc9, 0xf1, 0x63, 0xa4, 0xbe, 0x54, 0x6e,
	0xb1, 0x1d, 0x20, 0xb6, 0xbb, 0xd3, 0xaa, 0x45
#endif
};
/** SM2-related dataset */
/** Hash of "message" */
static uint8_t test_ver_hash_sm2[LENGTH_DOMAIN_PARAMS_256] = {
  0x17, 0x56, 0xac, 0x51, 0x7f, 0x85, 0xff, 0xda,
  0x75, 0x1d, 0xcd, 0xeb, 0xf3, 0xc8, 0x95, 0x75,
  0x27, 0x2f, 0xc5, 0x69, 0x04, 0xf9, 0xba, 0xad,
  0x98, 0x3e, 0xc4, 0x4c, 0x36, 0xfe, 0xac, 0x7b
};
/** Public key x coordinate for verification*/
static uint8_t test_ver_pubKey_x_sm2[LENGTH_DOMAIN_PARAMS_256] = {
  0x09, 0xf9, 0xdf, 0x31, 0x1e, 0x54, 0x21, 0xa1,
  0x50, 0xdd, 0x7d, 0x16, 0x1e, 0x4b, 0xc5, 0xc6,
  0x72, 0x17, 0x9f, 0xad, 0x18, 0x33, 0xfc, 0x07,
  0x6b, 0xb0, 0x8f, 0xf3, 0x56, 0xf3, 0x50, 0x20
};
/** Public key y coordinate for verification */
static uint8_t test_ver_pubKey_y_sm2[LENGTH_DOMAIN_PARAMS_256] = {
  0xcc, 0xea, 0x49, 0x0c, 0xe2, 0x67, 0x75, 0xa5,
  0x2d, 0xc6, 0xea, 0x71, 0x8c, 0xc1, 0xaa, 0x60,
  0x0a, 0xed, 0x05, 0xfb, 0xf3, 0x5e, 0x08, 0x4a,
  0x66, 0x32, 0xf6, 0x07, 0x2d, 0xa9, 0xad, 0x13
};
/** Signature r value to verify*/
static uint8_t test_ver_sign_r_sm2[LENGTH_DOMAIN_PARAMS_256] = {
  0x03, 0x18, 0xd5, 0xdd, 0xab, 0x78, 0xf8, 0x77,
  0x7c, 0xc1, 0xa5, 0x03, 0x20, 0xdf, 0x4d, 0x3e,
  0xe6, 0x7b, 0x4a, 0xad, 0xaa, 0x1d, 0xb3, 0xc9,
  0x28, 0x9e, 0xb1, 0x55, 0x14, 0x2f, 0x4f, 0x03
};
/** Signature s value to verify*/
static uint8_t test_ver_sign_s_sm2[LENGTH_DOMAIN_PARAMS_256] = {
  0x86, 0x9b, 0x8f, 0x16, 0x8e, 0xc0, 0xe2, 0x74,
  0xd5, 0x10, 0xa0, 0x74, 0x4e, 0xaa, 0x46, 0xb4,
  0x89, 0xf0, 0xb1, 0x9c, 0xea, 0xc3, 0x03, 0xe7,
  0x7e, 0xfd, 0x03, 0x86, 0xfa, 0x81, 0xca, 0xe4
};

/*
 * Dataset for public key decompression tests
 */
/** 256-related dataset */
/** nistp256 */
/**
 * X-coordinate of public key
 * this will be the X input for the test
 */
static uint8_t test_dec_pubKey_x_nistp256[LENGTH_DOMAIN_PARAMS_256] = {
#ifdef ECC_PATTERNS_BIG_ENDIAN
	0x44, 0xf1, 0x8b, 0x5b, 0x51, 0x99, 0x1e, 0xe3,
	0xad, 0xcf, 0x2e, 0xfc, 0xb7, 0x30, 0x00, 0x79,
	0x9e, 0x1c, 0x69, 0xb2, 0xee, 0xde, 0xe8, 0x12,
	0xbb, 0x12, 0x2f, 0x3a, 0x76, 0xa9, 0x23, 0x3c
#else
	0x3c, 0x23, 0xa9, 0x76, 0x3a, 0x2f, 0x12, 0xbb,
	0x12, 0xe8, 0xde, 0xee, 0xb2, 0x69, 0x1c, 0x9e,
	0x79, 0x00, 0x30, 0xb7, 0xfc, 0x2e, 0xcf, 0xad,
	0xe3, 0x1e, 0x99, 0x51, 0x5b, 0x8b, 0xf1, 0x44
#endif
};
/**
 * Y-coordinate of public key before decompression test:
 * this will be the Y input for the test.
 * The first byte is:
 *     - 0x00 if LSB of Y-coordinate is 0
 *     - 0x01 if LSB of Y-coordinate is 1
 */
static uint8_t test_dec_pubKey_y_nistp256[LENGTH_DOMAIN_PARAMS_256] = {
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
/**
 * Y-coordinate of public key: this is the expected output
 */
static uint8_t test_dec_pubKey_y_exp_nistp256[LENGTH_DOMAIN_PARAMS_256] = {
#ifdef ECC_PATTERNS_BIG_ENDIAN
	0x6d, 0x06, 0xcb, 0x4f, 0x92, 0x27, 0x4b, 0xdc,
	0x52, 0xaa, 0x51, 0xe8, 0x24, 0xbb, 0x54, 0x02,
	0x8c, 0xd1, 0x0a, 0x0c, 0x40, 0xf1, 0x63, 0x10,
	0x23, 0x2f, 0xe0, 0x9e, 0x99, 0x30, 0x61, 0xed
#else
	0xed, 0x61, 0x30, 0x99, 0x9e, 0xe0, 0x2f, 0x23,
	0x10, 0x63, 0xf1, 0x40, 0x0c, 0x0a, 0xd1, 0x8c,
	0x02, 0x54, 0xbb, 0x24, 0xe8, 0x51, 0xaa, 0x52,
	0xdc, 0x4b, 0x27, 0x92, 0x4f, 0xcb, 0x06, 0x6d
#endif
};
/**
 * Y-coordinate of public key before decompression test:
 * this will be the Y input for the negative test.
 */
static uint8_t test_dec_pubKey_y_neg_nistp256[LENGTH_DOMAIN_PARAMS_256] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/** bp256r1 */
/**
 * X-coordinate of public key
 * this will be the X input for the test
 */
static uint8_t test_dec_pubKey_x_bp256r1[LENGTH_DOMAIN_PARAMS_256] = {
#ifdef ECC_PATTERNS_BIG_ENDIAN
	0xa9, 0x15, 0xcf, 0xe8, 0xeb, 0x46, 0x21, 0x32,
	0xaf, 0x22, 0xd7, 0xf2, 0x7f, 0x6d, 0x9d, 0xce,
	0x3e, 0xc8, 0x19, 0xf0, 0xc0, 0x63, 0x65, 0x3f,
	0x7c, 0xba, 0x3f, 0x94, 0x0a, 0x4a, 0xb3, 0xdf
#else
	0xdf, 0xb3, 0x4a, 0x0a, 0x94, 0x3f, 0xba, 0x7c,
	0x3f, 0x65, 0x63, 0xc0, 0xf0, 0x19, 0xc8, 0x3e,
	0xce, 0x9d, 0x6d, 0x7f, 0xf2, 0xd7, 0x22, 0xaf,
	0x32, 0x21, 0x46, 0xeb, 0xe8, 0xcf, 0x15, 0xa9
#endif
};
/**
 * Y-coordinate of public key before decompression test:
 * this will be the Y input for the test.
 * The first byte is:
 *     - 0x00 if LSB of Y-coordinate is 0
 *     - 0x01 if LSB of Y-coordinate is 1
 */
static uint8_t test_dec_pubKey_y_bp256r1[LENGTH_DOMAIN_PARAMS_256] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
/**
 * Y-coordinate of public key: this is the expected output
 */
static uint8_t test_dec_pubKey_y_exp_bp256r1[LENGTH_DOMAIN_PARAMS_256] = {
#ifdef ECC_PATTERNS_BIG_ENDIAN
	0x1a, 0xde, 0x51, 0xfe, 0x78, 0x94, 0xeb, 0xe6,
	0x1b, 0xc7, 0x2d, 0xca, 0x7a, 0x16, 0x58, 0x54,
	0x36, 0xcc, 0xc7, 0x4a, 0xba, 0x60, 0x0b, 0x24,
	0xbd, 0x3b, 0xc4, 0x46, 0xe1, 0x65, 0x85, 0x0c
#else
	0x0c, 0x85, 0x65, 0xe1, 0x46, 0xc4, 0x3b, 0xbd,
	0x24, 0x0b, 0x60, 0xba, 0x4a, 0xc7, 0xcc, 0x36,
	0x54, 0x58, 0x16, 0x7a, 0xca, 0x2d, 0xc7, 0x1b,
	0xe6, 0xeb, 0x94, 0x78, 0xfe, 0x51, 0xde, 0x1a
#endif
};
/**
 * Y-coordinate of public key before decompression test:
 * this will be the Y input for the negative test.
 */
static uint8_t test_dec_pubKey_y_neg_bp256r1[LENGTH_DOMAIN_PARAMS_256] = {
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/** bp384r1 */
/**
 * X-coordinate of public key
 * this will be the X input for the test
 */
static uint8_t test_dec_pubKey_x_bp384r1[LENGTH_DOMAIN_PARAMS_384] = {
#ifdef ECC_PATTERNS_BIG_ENDIAN
	0x22, 0xf0, 0xf5, 0x9b, 0x03, 0x44, 0xcd, 0x71,
	0xb2, 0x0e, 0xe6, 0xeb, 0x71, 0x08, 0x90, 0x00,
	0x5b, 0x2f, 0x10, 0x99, 0xe4, 0x5e, 0x4f, 0x0f,
	0x90, 0xb2, 0xc0, 0x3e, 0x0d, 0x20, 0x47, 0x41,
	0x5b, 0x64, 0x4c, 0xcc, 0xe0, 0x2c, 0xec, 0x6e,
	0xf8, 0x0a, 0xdb, 0x73, 0x40, 0xd0, 0x9f, 0x0d
#else
	0x0d, 0x9f, 0xd0, 0x40, 0x73, 0xdb, 0x0a, 0xf8,
	0x6e, 0xec, 0x2c, 0xe0, 0xcc, 0x4c, 0x64, 0x5b,
	0x41, 0x47, 0x20, 0x0d, 0x3e, 0xc0, 0xb2, 0x90,
	0x0f, 0x4f, 0x5e, 0xe4, 0x99, 0x10, 0x2f, 0x5b,
	0x00, 0x90, 0x08, 0x71, 0xeb, 0xe6, 0x0e, 0xb2,
	0x71, 0xcd, 0x44, 0x03, 0x9b, 0xf5, 0xf0, 0x22
#endif
};
/**
 * Y-coordinate of public key before decompression test:
 * this will be the Y input for the test.
 * The first byte is:
 *     - 0x00 if LSB of Y-coordinate is 0
 *     - 0x01 if LSB of Y-coordinate is 1
 */
static uint8_t test_dec_pubKey_y_bp384r1[LENGTH_DOMAIN_PARAMS_384] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/**
 * Y-coordinate of public key: this is the expected output
 */
static uint8_t test_dec_pubKey_y_exp_bp384r1[LENGTH_DOMAIN_PARAMS_384] = {
#ifdef ECC_PATTERNS_BIG_ENDIAN
	0x26, 0x96, 0x0f, 0x4e, 0xc1, 0xd5, 0x73, 0xda,
	0xf4, 0xd8, 0x3f, 0x53, 0x30, 0xc1, 0x89, 0xff,
	0x5d, 0x5e, 0x33, 0x5b, 0x3f, 0x4b, 0x17, 0x62,
	0x1c, 0x0a, 0xc9, 0x65, 0x43, 0x35, 0x11, 0xf9,
	0xe8, 0xa1, 0x95, 0xed, 0xae, 0x59, 0xa3, 0xdc,
	0xbc, 0x43, 0x33, 0x66, 0xf5, 0xe0, 0x02, 0x3a
#else
	0x3a, 0x02, 0xe0, 0xf5, 0x66, 0x33, 0x43, 0xbc,
	0xdc, 0xa3, 0x59, 0xae, 0xed, 0x95, 0xa1, 0xe8,
	0xf9, 0x11, 0x35, 0x43, 0x65, 0xc9, 0x0a, 0x1c,
	0x62, 0x17, 0x4b, 0x3f, 0x5b, 0x33, 0x5e, 0x5d,
	0xff, 0x89, 0xc1, 0x30, 0x53, 0x3f, 0xd8, 0xf4,
	0xda, 0x73, 0xd5, 0xc1, 0x4e, 0x0f, 0x96, 0x26
#endif
};
/**
 * Y-coordinate of public key before decompression test:
 * this will be the Y input for the negative test.
 */
static uint8_t test_dec_pubKey_y_neg_bp384r1[LENGTH_DOMAIN_PARAMS_384] = {
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/*
 * Dataset for sha tests
 */
/** msg is "message" */
static uint8_t test_hash_msg[HASH_MSG_SIZE] = {
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65
};
/** msg is "messagg": this is used for negative test */
static uint8_t test_hash_msg_neg[HASH_MSG_SIZE] = {
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x67
};
/*
 * Dataset for sha256 tests
 */
/** Expected hash of "message" using SHA256 */
static uint8_t test_hash_msg_exp_256[LENGTH_DOMAIN_PARAMS_256] = {
	0xab, 0x53, 0x0a, 0x13, 0xe4, 0x59, 0x14, 0x98,
	0x2b, 0x79, 0xf9, 0xb7, 0xe3, 0xfb, 0xa9, 0x94,
	0xcf, 0xd1, 0xf3, 0xfb, 0x22, 0xf7, 0x1c, 0xea,
	0x1a, 0xfb, 0xf0, 0x2b, 0x46, 0x0c, 0x6d, 0x1d
};

/*
 * Dataset for sha384 tests
 */
/** Expected hash of "message" using SHA384 */
static uint8_t test_hash_msg_exp_384[LENGTH_DOMAIN_PARAMS_384] = {
	0x35, 0x3e, 0xb7, 0x51, 0x6a, 0x27, 0xef, 0x92,
	0xe9, 0x6d, 0x1a, 0x31, 0x97, 0x12, 0xd8, 0x4b,
	0x90, 0x2e, 0xaa, 0x82, 0x88, 0x19, 0xe5, 0x3a,
	0x8b, 0x09, 0xaf, 0x70, 0x28, 0x10, 0x3a, 0x99,
	0x78, 0xba, 0x8f, 0xeb, 0x61, 0x61, 0xe3, 0x3c,
	0x36, 0x19, 0xc5, 0xda, 0x4c, 0x46, 0x66, 0xa5
};

/*
 * Dataset for sha512 tests
 */
/** Expected hash of "message" using SHA512 */
static uint8_t test_hash_msg_exp_512[LENGTH_DOMAIN_PARAMS_512] = {
	0xf8, 0xda, 0xf5, 0x7a, 0x33, 0x47, 0xcc, 0x4d,
	0x6b, 0x9d, 0x57, 0x5b, 0x31, 0xfe, 0x60, 0x77,
	0xe2, 0xcb, 0x48, 0x7f, 0x60, 0xa9, 0x62, 0x33,
	0xc0, 0x8c, 0xb4, 0x79, 0xdb, 0xf3, 0x15, 0x38,
	0xcc, 0x91, 0x5e, 0xc6, 0xd4, 0x8b, 0xdb, 0xaa,
	0x96, 0xdd, 0xc1, 0xa1, 0x6d, 0xb4, 0xf4, 0xf9,
	0x6f, 0x37, 0x27, 0x6c, 0xfc, 0xb3, 0x51, 0x0b,
	0x82, 0x46, 0x24, 0x17, 0x70, 0xd5, 0x95, 0x2c
};

/*
 * Dataset for SM3 tests
 */
/** Expected hash of "message" using SM3 */
static uint8_t test_sm3_256_exp[LENGTH_DOMAIN_PARAMS_256] = {
  0x17, 0x56, 0xAC, 0x51, 0x7F, 0x85, 0xFF, 0xDA,
  0x75, 0x1D, 0xCD, 0xEB, 0xF3, 0xC8, 0x95, 0x75,
  0x27, 0x2F, 0xC5, 0x69, 0x04, 0xF9, 0xBA, 0xAD,
  0x98, 0x3E, 0xC4, 0x4C, 0x36, 0xFE, 0xAC, 0x7B,
};

/*
 * Dataset for public key reconstruction tests
 */
/** 256-related dataset */
/** Hash of "message" */
static uint8_t test_rec_hash_256[LENGTH_DOMAIN_PARAMS_256] = {
#ifdef ECC_PATTERNS_BIG_ENDIAN
	0xab, 0x53, 0x0a, 0x13, 0xe4, 0x59, 0x14, 0x98,
	0x2b, 0x79, 0xf9, 0xb7, 0xe3, 0xfb, 0xa9, 0x94,
	0xcf, 0xd1, 0xf3, 0xfb, 0x22, 0xf7, 0x1c, 0xea,
	0x1a, 0xfb, 0xf0, 0x2b, 0x46, 0x0c, 0x6d, 0x1d
#else
	0x1d, 0x6d, 0x0c, 0x46, 0x2b, 0xf0, 0xfb, 0x1a,
	0xea, 0x1c, 0xf7, 0x22, 0xfb, 0xf3, 0xd1, 0xcf,
	0x94, 0xa9, 0xfb, 0xe3, 0xb7, 0xf9, 0x79, 0x2b,
	0x98, 0x14, 0x59, 0xe4, 0x13, 0x0a, 0x53, 0xab
#endif
};
/** nistp256 */
/** X coordinate of public key reconstruction data */
static uint8_t test_rec_pubKey_data_x_nistp256[LENGTH_DOMAIN_PARAMS_256] = {
#ifdef ECC_PATTERNS_BIG_ENDIAN
	0x28, 0x92, 0xed, 0xd2, 0xba, 0xf5, 0xfe, 0xba,
	0x04, 0x7c, 0xf5, 0xaa, 0xff, 0xe1, 0x11, 0xb4,
	0xb0, 0x94, 0x3d, 0xa7, 0xac, 0x77, 0x0e, 0xdc,
	0x4d, 0x48, 0x6f, 0x59, 0xe9, 0x7f, 0x97, 0x31
#else
	0x31, 0x97, 0x7f, 0xe9, 0x59, 0x6f, 0x48, 0x4d,
	0xdc, 0x0e, 0x77, 0xac, 0xa7, 0x3d, 0x94, 0xb0,
	0xb4, 0x11, 0xe1, 0xff, 0xaa, 0xf5, 0x7c, 0x04,
	0xba, 0xfe, 0xf5, 0xba, 0xd2, 0xed, 0x92, 0x28
#endif
};
/** Y coordinate of public key reconstruction data */
static uint8_t test_rec_pubKey_data_y_nistp256[LENGTH_DOMAIN_PARAMS_256] = {
#ifdef ECC_PATTERNS_BIG_ENDIAN
	0xb4, 0xd9, 0x8f, 0x7e, 0xff, 0xef, 0x45, 0xf4,
	0x76, 0xa0, 0xfe, 0x5d, 0xa2, 0x93, 0xfe, 0xa0,
	0x32, 0x4b, 0x7b, 0x98, 0x50, 0xe7, 0x1d, 0x05,
	0x10, 0x26, 0x6b, 0x3c, 0x82, 0xec, 0xe6, 0xee
#else
	0xee, 0xe6, 0xec, 0x82, 0x3c, 0x6b, 0x26, 0x10,
	0x05, 0x1d, 0xe7, 0x50, 0x98, 0x7b, 0x4b, 0x32,
	0xa0, 0xfe, 0x93, 0xa2, 0x5d, 0xfe, 0xa0, 0x76,
	0xf4, 0x45, 0xef, 0xff, 0x7e, 0x8f, 0xd9, 0xb4
#endif
};
/** X coordinate of CA public key */
static uint8_t test_rec_ca_pubKey_x_nistp256[LENGTH_DOMAIN_PARAMS_256] = {
#ifdef ECC_PATTERNS_BIG_ENDIAN
	0x34, 0x77, 0xc4, 0x0f, 0x3c, 0xf3, 0x04, 0x99,
	0xde, 0x96, 0x6e, 0x19, 0xaf, 0xB6, 0xbd, 0xa9,
	0x81, 0x9c, 0xb4, 0x12, 0xb8, 0xfd, 0x52, 0x0a,
	0x03, 0xa5, 0xbe, 0x20, 0x27, 0xda, 0x7e, 0xc2
#else
	0xc2, 0x7e, 0xda, 0x27, 0x20, 0xbe, 0xa5, 0x03,
	0x0a, 0x52, 0xfd, 0xb8, 0x12, 0xb4, 0x9c, 0x81,
	0xa9, 0xbd, 0xb6, 0xaf, 0x19, 0x6e, 0x96, 0xde,
	0x99, 0x04, 0xf3, 0x3c, 0x0f, 0xc4, 0x77, 0x34
#endif
};
/** Y coordinate of CA public key */
static uint8_t test_rec_ca_pubKey_y_nistp256[LENGTH_DOMAIN_PARAMS_256] = {
#ifdef ECC_PATTERNS_BIG_ENDIAN
	0x4e, 0xbc, 0x03, 0x7f, 0x07, 0x79, 0x0c, 0x61,
	0xe4, 0xcb, 0x51, 0x56, 0x5e, 0x8e, 0xc1, 0x48,
	0xba, 0x68, 0xe9, 0x0f, 0x1e, 0x69, 0xa1, 0x4b,
	0x5f, 0x70, 0x28, 0x86, 0xaf, 0x27, 0x0a, 0x0c
#else
	0x0c, 0x0a, 0x27, 0xaf, 0x86, 0x28, 0x70, 0x5f,
	0x4b, 0xa1, 0x69, 0x1e, 0x0f, 0xe9, 0x68, 0xba,
	0x48, 0xc1, 0x8e, 0x5e, 0x56, 0x51, 0xcb, 0xe4,
	0x61, 0x0c, 0x79, 0x07, 0x7f, 0x03, 0xbc, 0x4e
#endif
};
/** X coordinate of reconstructed public key */
static uint8_t test_rec_pubKey_x_exp_nistp256[LENGTH_DOMAIN_PARAMS_256] = {
#ifdef ECC_PATTERNS_BIG_ENDIAN
	0x0e, 0x42, 0x1f, 0x49, 0xf8, 0x86, 0xb7, 0x9c,
	0x45, 0x15, 0x6e, 0xd4, 0x53, 0xf4, 0x2a, 0x61,
	0x5c, 0xc0, 0x57, 0x47, 0xfc, 0xcf, 0x1e, 0xf3,
	0x7d, 0x88, 0x3d, 0x77, 0xba, 0xb2, 0xb8, 0x71
#else
	0x71, 0xb8, 0xb2, 0xba, 0x77, 0x3d, 0x88, 0x7d,
	0xf3, 0x1e, 0xcf, 0xfc, 0x47, 0x57, 0xc0, 0x5c,
	0x61, 0x2a, 0xf4, 0x53, 0xd4, 0x6e, 0x15, 0x45,
	0x9c, 0xb7, 0x86, 0xf8, 0x49, 0x1f, 0x42, 0x0e
#endif
};
/** Y coordinate of reconstructed public key */
static uint8_t test_rec_pubKey_y_exp_nistp256[LENGTH_DOMAIN_PARAMS_256] = {
#ifdef ECC_PATTERNS_BIG_ENDIAN
	0xbc, 0x57, 0x6d, 0x88, 0xa6, 0x6e, 0xcc, 0x78,
	0x81, 0x25, 0xe7, 0xa6, 0x92, 0x29, 0x17, 0x30,
	0x75, 0x00, 0x16, 0x83, 0x82, 0xeb, 0xb6, 0x78,
	0x98, 0x8f, 0x67, 0xea, 0x08, 0x88, 0x48, 0x68
#else
	0x68, 0x48, 0x88, 0x08, 0xea, 0x67, 0x8f, 0x98,
	0x78, 0xb6, 0xeb, 0x82, 0x83, 0x16, 0x00, 0x75,
	0x30, 0x17, 0x29, 0x92, 0xa6, 0xe7, 0x25, 0x81,
	0x78, 0xcc, 0x6e, 0xa6, 0x88, 0x6d, 0x57, 0xbc
#endif
};

/** bp256r1 */
/** X coordinate of public key reconstruction data */
static uint8_t test_rec_pubKey_data_x_bp256r1[LENGTH_DOMAIN_PARAMS_256] = {
#ifdef ECC_PATTERNS_BIG_ENDIAN
	0x83, 0xaf, 0x82, 0x00, 0x49, 0xb7, 0x1e, 0x75,
	0x72, 0x85, 0x6f, 0x1d, 0xd6, 0xf2, 0x67, 0xbb,
	0x43, 0x46, 0xc2, 0x0d, 0x22, 0x03, 0x78, 0x24,
	0x36, 0xcc, 0xef, 0xe3, 0xb0, 0x20, 0x8c, 0x56
#else
	0x56, 0x8c, 0x20, 0xb0, 0xe3, 0xef, 0xcc, 0x36,
	0x24, 0x78, 0x03, 0x22, 0x0d, 0xc2, 0x46, 0x43,
	0xbb, 0x67, 0xf2, 0xd6, 0x1d, 0x6f, 0x85, 0x72,
	0x75, 0x1e, 0xb7, 0x49, 0x00, 0x82, 0xaf, 0x83
#endif
};
/** Y coordinate of public key reconstruction data */
static uint8_t test_rec_pubKey_data_y_bp256r1[LENGTH_DOMAIN_PARAMS_256] = {
#ifdef ECC_PATTERNS_BIG_ENDIAN
	0x06, 0xea, 0x28, 0x17, 0xfc, 0x04, 0xbc, 0xd4,
	0x36, 0xe3, 0x5a, 0x5c, 0x97, 0x49, 0xa9, 0x4d,
	0xb2, 0xeb, 0xf8, 0x59, 0x7c, 0xc3, 0xd6, 0xd6,
	0x93, 0xc5, 0x9f, 0x3b, 0x9f, 0xd9, 0x2a, 0xa9
#else
	0xa9, 0x2a, 0xd9, 0x9f, 0x3b, 0x9f, 0xc5, 0x93,
	0xd6, 0xd6, 0xc3, 0x7c, 0x59, 0xf8, 0xeb, 0xb2,
	0x4d, 0xa9, 0x49, 0x97, 0x5c, 0x5a, 0xe3, 0x36,
	0xd4, 0xbc, 0x04, 0xfc, 0x17, 0x28, 0xea, 0x06
#endif
};
/** X coordinate of CA public key */
static uint8_t test_rec_ca_pubKey_x_bp256r1[LENGTH_DOMAIN_PARAMS_256] = {
#ifdef ECC_PATTERNS_BIG_ENDIAN
	0x64, 0x42, 0xc7, 0x90, 0x3d, 0x6d, 0xe1, 0xcb,
	0xa0, 0x77, 0xdb, 0x78, 0x38, 0x40, 0x8d, 0x0d,
	0x27, 0x85, 0x1d, 0xa1, 0x88, 0xf4, 0xe6, 0x8e,
	0x29, 0x9c, 0x92, 0xd2, 0xa0, 0x43, 0x63, 0x4e
#else
	0x4e, 0x63, 0x43, 0xa0, 0xd2, 0x92, 0x9c, 0x29,
	0x8e, 0xe6, 0xf4, 0x88, 0xa1, 0x1d, 0x85, 0x27,
	0x0d, 0x8d, 0x40, 0x38, 0x78, 0xdb, 0x77, 0xa0,
	0xcb, 0xe1, 0x6d, 0x3d, 0x90, 0xc7, 0x42, 0x64
#endif
};
/** Y coordinate of CA public key */
static uint8_t test_rec_ca_pubKey_y_bp256r1[LENGTH_DOMAIN_PARAMS_256] = {
#ifdef ECC_PATTERNS_BIG_ENDIAN
	0x9f, 0xd9, 0x2c, 0x03, 0x9a, 0x31, 0x00, 0x8f,
	0xdf, 0x12, 0x34, 0xa2, 0xb3, 0x8e, 0x5d, 0xd1,
	0xf6, 0xde, 0xa9, 0xca, 0xe1, 0x33, 0x29, 0xb9,
	0xfa, 0xfe, 0x89, 0x8c, 0xde, 0x09, 0x6c, 0xcc
#else
	0xcc, 0x6c, 0x09, 0xde, 0x8c, 0x89, 0xfe, 0xfa,
	0xb9, 0x29, 0x33, 0xe1, 0xca, 0xa9, 0xde, 0xf6,
	0xd1, 0x5d, 0x8e, 0xb3, 0xa2, 0x34, 0x12, 0xdf,
	0x8f, 0x00, 0x31, 0x9a, 0x03, 0x2c, 0xd9, 0x9f
#endif
};
/** X coordinate of reconstructed public key */
static uint8_t test_rec_pubKey_x_exp_bp256r1[LENGTH_DOMAIN_PARAMS_256] = {
#ifdef ECC_PATTERNS_BIG_ENDIAN
	0x38, 0xc7, 0x17, 0x26, 0x3e, 0xf4, 0x08, 0xb4,
	0x43, 0x6d, 0x2d, 0xd6, 0x34, 0x00, 0xe7, 0x50,
	0x80, 0xc4, 0x76, 0x77, 0xbc, 0xc8, 0x08, 0x6b,
	0x5b, 0x6c, 0xec, 0x6c, 0x07, 0x43, 0x45, 0xcf
#else
	0xcf, 0x45, 0x43, 0x07, 0x6c, 0xec, 0x6c, 0x5b,
	0x6b, 0x08, 0xc8, 0xbc, 0x77, 0x76, 0xc4, 0x80,
	0x50, 0xe7, 0x00, 0x34, 0xd6, 0x2d, 0x6d, 0x43,
	0xb4, 0x08, 0xf4, 0x3e, 0x26, 0x17, 0xc7, 0x38
#endif
};
/** Y coordinate of reconstructed public key */
static uint8_t test_rec_pubKey_y_exp_bp256r1[LENGTH_DOMAIN_PARAMS_256] = {
#ifdef ECC_PATTERNS_BIG_ENDIAN
	0x0c, 0x81, 0x40, 0xea, 0x0c, 0x9e, 0x7b, 0xfe,
	0xa2, 0x53, 0x8c, 0xc8, 0xbb, 0x64, 0x59, 0xa0,
	0xda, 0x55, 0x8b, 0xa8, 0x75, 0xc9, 0x02, 0x7f,
	0x2f, 0x61, 0x43, 0xaa, 0x55, 0xde, 0x50, 0xf6
#else
	0xf6, 0x50, 0xde, 0x55, 0xaa, 0x43, 0x61, 0x2f,
	0x7f, 0x02, 0xc9, 0x75, 0xa8, 0x8b, 0x55, 0xda,
	0xa0, 0x59, 0x64, 0xbb, 0xc8, 0x8c, 0x53, 0xa2,
	0xfe, 0x7b, 0x9e, 0x0c, 0xea, 0x40, 0x81, 0x0c
#endif
};
#endif
