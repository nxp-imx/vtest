/*
 * Copyright 2019 NXP
 */

/*
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 *   Neither the name of the copyright holder nor the names of its contributors
 *   may be used to endorse or promote products derived from this software
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES;  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON  ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 *
 * @file ECCcrypto_data.h
 *
 * @brief Test patterns for all crypto tests
 *
 */

#ifndef ECC_CRYPTO_DATA_H
#define ECC_CRYPTO_DATA_H

/* Curve domain parameters */
/** 32 bytes for 256-bit Elliptic Curve Domain Parameter */
#define LENGTH_DOMAIN_PARAMS_256 32
/** 48 bytes for 384-bit Elliptic Curve Domain Parameter */
#define LENGTH_DOMAIN_PARAMS_384 48
/** 64 bytes for 512-bit Elliptic Curve Domain Parameter */
#define LENGTH_DOMAIN_PARAMS_512 64

/** Size of "message" for hash */
#define HASH_MSG_SIZE         7

/* Dataset for signature verification tests */
/** Message is "message" */
static uint8_t test_ver_msg[HASH_MSG_SIZE] = {
		0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65
		};
/** 256-related dataset */
/** Hash of "message" */
static uint8_t test_ver_hash_256[LENGTH_DOMAIN_PARAMS_256] = {
		0x1D, 0x6D, 0x0C, 0x46, 0x2B, 0xF0, 0xFB, 0x1A,
		0xEA, 0x1C, 0xF7, 0x22, 0xFB, 0xF3, 0xD1, 0xCF,
		0x94, 0xA9, 0xFB, 0xE3, 0xB7, 0xF9, 0x79, 0x2B,
		0x98, 0x14, 0x59, 0xE4, 0x13, 0x0A, 0x53, 0xAB
		};
/** nistp256 */
/** Public key x coordinate for verification*/
static uint8_t test_ver_pubKey_x_nistp256[LENGTH_DOMAIN_PARAMS_256] = {
		0xC6, 0xA8, 0xBB, 0x62, 0xD9, 0x3E, 0x98, 0x0A,
		0xC4, 0x67, 0xC4, 0x4D, 0x38, 0x2C, 0xFB, 0x5E,
		0x7B, 0x40, 0x6A, 0x4E, 0x18, 0x14, 0x93, 0x80,
		0x1F, 0x4C, 0xCD, 0x68, 0x56, 0x9E, 0x6D, 0x3A
		};
/** Public key y coordinate for verification */
static uint8_t test_ver_pubKey_y_nistp256[LENGTH_DOMAIN_PARAMS_256] = {
		0x05, 0x2A, 0xA2, 0xE6, 0xEB, 0xD1, 0xE7, 0x73,
		0x7B, 0x9B, 0x79, 0x7C, 0xD4, 0x22, 0xF6, 0x17,
		0x66, 0x7A, 0x5A, 0xE3, 0x4E, 0xBD, 0xD9, 0xE6,
		0x52, 0xC0, 0x81, 0x93, 0xC2, 0x5F, 0x2D, 0x97
		};
/** Signature r value to verify*/
static uint8_t test_ver_sign_r_nistp256[LENGTH_DOMAIN_PARAMS_256] = {
		0x73, 0x5D, 0x9E, 0x22, 0x83, 0xCE, 0x2B, 0x1D,
		0xA6, 0xDA, 0x4A, 0x1C, 0x7A, 0x8D, 0x98, 0x21,
		0x4E, 0x9A, 0x9F, 0xC8, 0x6F, 0xC1, 0x0C, 0x51,
		0x93, 0x35, 0x52, 0x9D, 0xFF, 0xE9, 0x4B, 0x91
		};
/** Signature s value to verify*/
static uint8_t test_ver_sign_s_nistp256[LENGTH_DOMAIN_PARAMS_256] = {
		0x20, 0x14, 0xE4, 0x03, 0x57, 0xA4, 0x6E, 0x39,
		0xEA, 0x8B, 0x2E, 0xF1, 0xCB, 0x64, 0xE5, 0x6F,
		0xEF, 0x34, 0xD1, 0xDE, 0x93, 0x6B, 0xC8, 0x39,
		0x44, 0x86, 0xFD, 0x6F, 0x64, 0x26, 0x7A, 0xE6
		};
/** bp256r1 */
/** Public key x coordinate for verification*/
static uint8_t test_ver_pubKey_x_bp256r1[LENGTH_DOMAIN_PARAMS_256] = {
		0xDF, 0xB3, 0x4A, 0x0A, 0x94, 0x3F, 0xBA, 0x7C,
		0x3F, 0x65, 0x63, 0xC0, 0xF0, 0x19, 0xC8, 0x3E,
		0xCE, 0x9D, 0x6D, 0x7F, 0xF2, 0xD7, 0x22, 0xAF,
		0x32, 0x21, 0x46, 0xEB, 0xE8, 0xCF, 0x15, 0xA9
		};
/** Public key y coordinate for verification */
static uint8_t test_ver_pubKey_y_bp256r1[LENGTH_DOMAIN_PARAMS_256] = {
		0x0C, 0x85, 0x65, 0xE1, 0x46, 0xC4, 0x3B, 0xBD,
		0x24, 0x0B, 0x60, 0xBA, 0x4A, 0xC7, 0xCC, 0x36,
		0x54, 0x58, 0x16, 0x7A, 0xCA, 0x2D, 0xC7, 0x1B,
		0xE6, 0xEB, 0x94, 0x78, 0xFE, 0x51, 0xDE, 0x1A
		};
/** Signature r value to verify*/
static uint8_t test_ver_sign_r_bp256r1[LENGTH_DOMAIN_PARAMS_256] = {
		0x5E, 0x67, 0x57, 0x72, 0xDA, 0x02, 0xA6, 0xB8,
		0x03, 0xE3, 0x33, 0x99, 0x55, 0x5B, 0x0B, 0x54,
		0x39, 0x59, 0x72, 0xB9, 0x40, 0x60, 0x2C, 0x6D,
		0x2C, 0xCC, 0x2D, 0x5F, 0x63, 0xE9, 0xD9, 0x67
		};
/** Signature s value to verify*/
static uint8_t test_ver_sign_s_bp256r1[LENGTH_DOMAIN_PARAMS_256] = {
		0xBF, 0x22, 0x73, 0x01, 0xEA, 0xC1, 0x51, 0x9B,
		0xFF, 0xC4, 0x7A, 0x26, 0x67, 0xC1, 0x78, 0x57,
		0x5E, 0xF5, 0x23, 0xBD, 0x3A, 0x21, 0xE0, 0x8C,
		0x1D, 0x22, 0x72, 0x00, 0xF1, 0x2D, 0x0F, 0x57
		};

/** 384-related dataset */
/** Hash of "message" */
static uint8_t test_ver_hash_384[LENGTH_DOMAIN_PARAMS_384] = {
		0xA5, 0x66, 0x46, 0x4C, 0xDA, 0xC5, 0x19, 0x36,
		0x3C, 0xE3, 0x61, 0x61, 0xEB, 0x8F, 0xBA, 0x78,
		0x99, 0x3A, 0x10, 0x28, 0x70, 0xAF, 0x09, 0x8B,
		0x3A, 0xE5, 0x19, 0x88, 0x82, 0xAA, 0x2E, 0x90,
		0x4B, 0xD8, 0x12, 0x97, 0x31, 0x1A, 0x6D, 0xE9,
		0x92, 0xEF, 0x27, 0x6A, 0x51, 0xB7, 0x3E, 0x35
		};
/** bp384r1 */
/** Public key x coordinate for verification*/
static uint8_t test_ver_pubKey_x_bp384r1[LENGTH_DOMAIN_PARAMS_384] = {
		0xCC, 0x69, 0x40, 0x4F, 0x35, 0xDF, 0xBA, 0x91,
		0xDA, 0x64, 0xFC, 0xA7, 0x6A, 0x1B, 0xD6, 0x48,
		0xE6, 0x3E, 0x50, 0x1D, 0x73, 0xF1, 0xA5, 0x16,
		0x40, 0xA5, 0x86, 0x7D, 0x87, 0x7F, 0x56, 0xAE,
		0xA0, 0x93, 0x90, 0x19, 0x89, 0x67, 0x56, 0x35,
		0x0F, 0x68, 0x2F, 0x48, 0x9A, 0x16, 0x95, 0x15
		};
/** Public key y coordinate for verification */
static uint8_t test_ver_pubKey_y_bp384r1[LENGTH_DOMAIN_PARAMS_384] = {
		0xEE, 0x2B, 0x73, 0xAA, 0x25, 0xA0, 0x94, 0xA0,
		0x42, 0x6D, 0x7C, 0x18, 0x11, 0x99, 0x20, 0x77,
		0x3E, 0xE9, 0xBC, 0x21, 0x4D, 0xD7, 0x3C, 0x1D,
		0x72, 0x59, 0xCB, 0x16, 0x8A, 0x0D, 0x66, 0x36,
		0x36, 0x86, 0xF8, 0x25, 0xC7, 0xD7, 0x31, 0x33,
		0x90, 0x0A, 0x5D, 0xC4, 0xF7, 0x22, 0x6F, 0x69
		};
/** Signature r value to verify*/
static uint8_t test_ver_sign_r_bp384r1[LENGTH_DOMAIN_PARAMS_384] = {
		0xC3, 0x15, 0x9C, 0x6F, 0x0B, 0x8E, 0x20, 0x5E,
		0xF4, 0xD7, 0x19, 0x19, 0x18, 0x4A, 0x84, 0x8A,
		0xC4, 0x34, 0xF3, 0x3D, 0x0D, 0x96, 0x8D, 0xEF,
		0x05, 0x62, 0xE4, 0x45, 0x20, 0x7E, 0x46, 0x9F,
		0xFA, 0x36, 0x2D, 0xEF, 0x4B, 0xCE, 0xE0, 0xF5,
		0x12, 0xD3, 0x03, 0xFE, 0x7C, 0xCA, 0x16, 0x6B
		};
/** Signature s value to verify*/
static uint8_t test_ver_sign_s_bp384r1[LENGTH_DOMAIN_PARAMS_384] = {
		0x7D, 0x08, 0x10, 0xDC, 0xFD, 0x0F, 0x03, 0x35,
		0x59, 0xB4, 0x3F, 0x79, 0xE6, 0x34, 0xD9, 0xD4,
		0x54, 0x6C, 0x18, 0xDE, 0x39, 0x65, 0x10, 0x6E,
		0x21, 0x89, 0x19, 0x5F, 0x6C, 0xB0, 0x85, 0xA5,
		0xA5, 0xC9, 0xF1, 0x63, 0xA4, 0xBE, 0x54, 0x6E,
		0xB1, 0x1D, 0x20, 0xB6, 0xBB, 0xD3, 0xAA, 0x45
		};

/*
 * Dataset for public key decompression tests
 */
/** 256-related dataset */
/** nistp256 */
/**
 * X-coordinate of public key
 * this will be the X input for the test
 */
static uint8_t test_dec_pubKey_x_nistp256[LENGTH_DOMAIN_PARAMS_256] = {
		0x3c, 0x23, 0xa9, 0x76, 0x3a, 0x2f, 0x12, 0xbb,
		0x12, 0xe8, 0xde, 0xee, 0xb2, 0x69, 0x1c, 0x9e,
		0x79, 0x00, 0x30, 0xb7, 0xfc, 0x2e, 0xcf, 0xad,
		0xe3, 0x1e, 0x99, 0x51, 0x5b, 0x8b, 0xf1, 0x44
		};
/**
 * Y-coordinate of public key before decompression test:
 * this will be the Y input for the test.
 * The first byte is:
 *     - 0x00 if LSB of Y-coordinate is 0
 *     - 0x01 if LSB of Y-coordinate is 1
 */
static uint8_t test_dec_pubKey_y_nistp256[LENGTH_DOMAIN_PARAMS_256] = {
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
		};
/**
 * Y-coordinate of public key: this is the expected output
 */
static uint8_t test_dec_pubKey_y_exp_nistp256[LENGTH_DOMAIN_PARAMS_256] = {
		0xed, 0x61, 0x30, 0x99, 0x9e, 0xe0, 0x2f, 0x23,
		0x10, 0x63, 0xf1, 0x40, 0x0c, 0x0a, 0xd1, 0x8c,
		0x02, 0x54, 0xbb, 0x24, 0xe8, 0x51, 0xaa, 0x52,
		0xdc, 0x4b, 0x27, 0x92, 0x4f, 0xcb, 0x06, 0x6d
		};
/**
 * Y-coordinate of public key before decompression test:
 * this will be the Y input for the negative test.
 */
static uint8_t test_dec_pubKey_y_neg_nistp256[LENGTH_DOMAIN_PARAMS_256] = {
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
		};
/** bp256r1 */
/**
 * X-coordinate of public key
 * this will be the X input for the test
 */
static uint8_t test_dec_pubKey_x_bp256r1[LENGTH_DOMAIN_PARAMS_256] = {
		0xDF, 0xB3, 0x4A, 0x0A, 0x94, 0x3F, 0xBA, 0x7C,
		0x3F, 0x65, 0x63, 0xC0, 0xF0, 0x19, 0xC8, 0x3E,
		0xCE, 0x9D, 0x6D, 0x7F, 0xF2, 0xD7, 0x22, 0xAF,
		0x32, 0x21, 0x46, 0xEB, 0xE8, 0xCF, 0x15, 0xA9
		};
/**
 * Y-coordinate of public key before decompression test:
 * this will be the Y input for the test.
 * The first byte is:
 *     - 0x00 if LSB of Y-coordinate is 0
 *     - 0x01 if LSB of Y-coordinate is 1
 */
static uint8_t test_dec_pubKey_y_bp256r1[LENGTH_DOMAIN_PARAMS_256] = {
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
		};
/**
 * Y-coordinate of public key: this is the expected output
 */
static uint8_t test_dec_pubKey_y_exp_bp256r1[LENGTH_DOMAIN_PARAMS_256] = {
		0x0C, 0x85, 0x65, 0xE1, 0x46, 0xC4, 0x3B, 0xBD,
		0x24, 0x0B, 0x60, 0xBA, 0x4A, 0xC7, 0xCC, 0x36,
		0x54, 0x58, 0x16, 0x7A, 0xCA, 0x2D, 0xC7, 0x1B,
		0xE6, 0xEB, 0x94, 0x78, 0xFE, 0x51, 0xDE, 0x1A
		};
/**
 * Y-coordinate of public key before decompression test:
 * this will be the Y input for the negative test.
 */
static uint8_t test_dec_pubKey_y_neg_bp256r1[LENGTH_DOMAIN_PARAMS_256] = {
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
		};

/** bp384r1 */
/**
 * X-coordinate of public key
 * this will be the X input for the test
 */
static uint8_t test_dec_pubKey_x_bp384r1[LENGTH_DOMAIN_PARAMS_384] = {
		0x0D, 0x9F, 0xD0, 0x40, 0x73, 0xDB, 0x0A, 0xF8,
		0x6E, 0xEC, 0x2C, 0xE0, 0xCC, 0x4C, 0x64, 0x5B,
		0x41, 0x47, 0x20, 0x0D, 0x3E, 0xC0, 0xB2, 0x90,
		0x0F, 0x4F, 0x5E, 0xE4, 0x99, 0x10, 0x2F, 0x5B,
		0x00, 0x90, 0x08, 0x71, 0xEB, 0xE6, 0x0E, 0xB2,
		0x71, 0xCD, 0x44, 0x03, 0x9B, 0xF5, 0xF0, 0x22
		};
/**
 * Y-coordinate of public key before decompression test:
 * this will be the Y input for the test.
 * The first byte is:
 *     - 0x00 if LSB of Y-coordinate is 0
 *     - 0x01 if LSB of Y-coordinate is 1
 */
static uint8_t test_dec_pubKey_y_bp384r1[LENGTH_DOMAIN_PARAMS_384] = {
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
		};
/**
 * Y-coordinate of public key: this is the expected output
 */
static uint8_t test_dec_pubKey_y_exp_bp384r1[LENGTH_DOMAIN_PARAMS_384] = {
		0x3A, 0x02, 0xE0, 0xF5, 0x66, 0x33, 0x43, 0xBC,
		0xDC, 0xA3, 0x59, 0xAE, 0xED, 0x95, 0xA1, 0xE8,
		0xF9, 0x11, 0x35, 0x43, 0x65, 0xC9, 0x0A, 0x1C,
		0x62, 0x17, 0x4B, 0x3F, 0x5B, 0x33, 0x5E, 0x5D,
		0xFF, 0x89, 0xC1, 0x30, 0x53, 0x3F, 0xD8, 0xF4,
		0xDA, 0x73, 0xD5, 0xC1, 0x4E, 0x0F, 0x96, 0x26
		};
/**
 * Y-coordinate of public key before decompression test:
 * this will be the Y input for the negative test.
 */
static uint8_t test_dec_pubKey_y_neg_bp384r1[LENGTH_DOMAIN_PARAMS_384] = {
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
		};

/*
 * Dataset for sha tests
 */
/** msg is "message" */
static uint8_t test_hash_msg[HASH_MSG_SIZE] = {
		0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65
		};
/** msg is "messagg": this is used for negative test */
static uint8_t test_hash_msg_neg[HASH_MSG_SIZE] = {
		0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x67
		};
/*
 * Dataset for sha256 tests
 */
/** Expected hash of "message" using SHA256 */
static uint8_t test_hash_msg_exp_256[LENGTH_DOMAIN_PARAMS_256] = {
		0xab, 0x53, 0x0a, 0x13, 0xe4, 0x59, 0x14, 0x98,
		0x2b, 0x79, 0xf9, 0xb7, 0xe3, 0xfb, 0xa9, 0x94,
		0xcf, 0xd1, 0xf3, 0xfb, 0x22, 0xf7, 0x1c, 0xea,
		0x1a, 0xfb, 0xf0, 0x2b, 0x46, 0x0c, 0x6d, 0x1d
		};

/*
 * Dataset for sha384 tests
 */
/** Expected hash of "message" using SHA384 */
static uint8_t test_hash_msg_exp_384[LENGTH_DOMAIN_PARAMS_384] = {
		0x35, 0x3e, 0xb7, 0x51, 0x6a, 0x27, 0xef, 0x92,
		0xe9, 0x6d, 0x1a, 0x31, 0x97, 0x12, 0xd8, 0x4b,
		0x90, 0x2e, 0xaa, 0x82, 0x88, 0x19, 0xe5, 0x3a,
		0x8b, 0x09, 0xaf, 0x70, 0x28, 0x10, 0x3a, 0x99,
		0x78, 0xba, 0x8f, 0xeb, 0x61, 0x61, 0xe3, 0x3c,
		0x36, 0x19, 0xc5, 0xda, 0x4c, 0x46, 0x66, 0xa5
		};

/*
 * Dataset for sha512 tests
 */
/** Expected hash of "message" using SHA512 */
static uint8_t test_hash_msg_exp_512[LENGTH_DOMAIN_PARAMS_512] = {
		0xf8, 0xda, 0xf5, 0x7a, 0x33, 0x47, 0xcc, 0x4d,
		0x6b, 0x9d, 0x57, 0x5b, 0x31, 0xfe, 0x60, 0x77,
		0xe2, 0xcb, 0x48, 0x7f, 0x60, 0xa9, 0x62, 0x33,
		0xc0, 0x8c, 0xb4, 0x79, 0xdb, 0xf3, 0x15, 0x38,
		0xcc, 0x91, 0x5e, 0xc6, 0xd4, 0x8b, 0xdb, 0xaa,
		0x96, 0xdd, 0xc1, 0xa1, 0x6d, 0xb4, 0xf4, 0xf9,
		0x6f, 0x37, 0x27, 0x6c, 0xfc, 0xb3, 0x51, 0x0b,
		0x82, 0x46, 0x24, 0x17, 0x70, 0xd5, 0x95, 0x2c
		};

/*
 * Dataset for public key reconstruction tests
 */
/** 256-related dataset */
/** Hash of "message" */
static uint8_t test_rec_hash_256[LENGTH_DOMAIN_PARAMS_256] = {
		0x1D, 0x6D, 0x0C, 0x46, 0x2B, 0xF0, 0xFB, 0x1A,
		0xEA, 0x1C, 0xF7, 0x22, 0xFB, 0xF3, 0xD1, 0xCF,
		0x94, 0xA9, 0xFB, 0xE3, 0xB7, 0xF9, 0x79, 0x2B,
		0x98, 0x14, 0x59, 0xE4, 0x13, 0x0A, 0x53, 0xAB
		};
/** nistp256 */
/** X coordinate of public key reconstruction data */
static uint8_t test_rec_pubKey_data_x_nistp256[LENGTH_DOMAIN_PARAMS_256] = {
		0x31, 0x97, 0x7F, 0xE9, 0x59, 0x6F, 0x48, 0x4D,
		0xDC, 0x0E, 0x77, 0xAC, 0xA7, 0x3D, 0x94, 0xB0,
		0xB4, 0x11, 0xE1, 0xFF, 0xAA, 0xF5, 0x7C, 0x04,
		0xBA, 0xFE, 0xF5, 0xBA, 0xD2, 0xED, 0x92, 0x28
		};
/** Y coordinate of public key reconstruction data */
static uint8_t test_rec_pubKey_data_y_nistp256[LENGTH_DOMAIN_PARAMS_256] = {
		0xEE, 0xE6, 0xEC, 0x82, 0x3C, 0x6B, 0x26, 0x10,
		0x05, 0x1D, 0xE7, 0x50, 0x98, 0x7B, 0x4B, 0x32,
		0xA0, 0xFE, 0x93, 0xA2, 0x5D, 0xFE, 0xA0, 0x76,
		0xF4, 0x45, 0xEF, 0xFF, 0x7E, 0x8F, 0xD9, 0xB4
		};
/** X coordinate of CA public key */
static uint8_t test_rec_ca_pubKey_x_nistp256[LENGTH_DOMAIN_PARAMS_256] = {
		0xC2, 0x7E, 0xDA, 0x27, 0x20, 0xBE, 0xA5, 0x03,
		0x0A, 0x52, 0xFD, 0xB8, 0x12, 0xB4, 0x9C, 0x81,
		0xA9, 0xBD, 0xB6, 0xAF, 0x19, 0x6E, 0x96, 0xDE,
		0x99, 0x04, 0xF3, 0x3C, 0x0F, 0xC4, 0x77, 0x34
		};
/** Y coordinate of CA public key */
static uint8_t test_rec_ca_pubKey_y_nistp256[LENGTH_DOMAIN_PARAMS_256] = {
		0x0C, 0x0A, 0x27, 0xAF, 0x86, 0x28, 0x70, 0x5F,
		0x4B, 0xA1, 0x69, 0x1E, 0x0F, 0xE9, 0x68, 0xBA,
		0x48, 0xC1, 0x8E, 0x5E, 0x56, 0x51, 0xCB, 0xE4,
		0x61, 0x0C, 0x79, 0x07, 0x7F, 0x03, 0xBC, 0x4E
		};
/** X coordinate of reconstructed public key */
static uint8_t test_rec_pubKey_x_exp_nistp256[LENGTH_DOMAIN_PARAMS_256] = {
		0x71, 0xB8, 0xB2, 0xBA, 0x77, 0x3D, 0x88, 0x7D,
		0xF3, 0x1E, 0xCF, 0xFC, 0x47, 0x57, 0xC0, 0x5C,
		0x61, 0x2A, 0xF4, 0x53, 0xD4, 0x6E, 0x15, 0x45,
		0x9C, 0xB7, 0x86, 0xF8, 0x49, 0x1F, 0x42, 0x0E
		};
/** Y coordinate of reconstructed public key */
static uint8_t test_rec_pubKey_y_exp_nistp256[LENGTH_DOMAIN_PARAMS_256] = {
		0x68, 0x48, 0x88, 0x08, 0xEA, 0x67, 0x8F, 0x98,
		0x78, 0xB6, 0xEB, 0x82, 0x83, 0x16, 0x00, 0x75,
		0x30, 0x17, 0x29, 0x92, 0xA6, 0xE7, 0x25, 0x81,
		0x78, 0xCC, 0x6E, 0xA6, 0x88, 0x6D, 0x57, 0xBC
		};
/** bp256r1 */
/** X coordinate of public key reconstruction data */
static uint8_t test_rec_pubKey_data_x_bp256r1[LENGTH_DOMAIN_PARAMS_256] = {
		0x56, 0x8C, 0x20, 0xB0, 0xE3, 0xEF, 0xCC, 0x36,
		0x24, 0x78, 0x03, 0x22, 0x0D, 0xC2, 0x46, 0x43,
		0xBB, 0x67, 0xF2, 0xD6, 0x1D, 0x6F, 0x85, 0x72,
		0x75, 0x1E, 0xB7, 0x49, 0x00, 0x82, 0xAF, 0x83
		};
/** Y coordinate of public key reconstruction data */
static uint8_t test_rec_pubKey_data_y_bp256r1[LENGTH_DOMAIN_PARAMS_256] = {
		0xA9, 0x2A, 0xD9, 0x9F, 0x3B, 0x9F, 0xC5, 0x93,
		0xD6, 0xD6, 0xC3, 0x7C, 0x59, 0xF8, 0xEB, 0xB2,
		0x4D, 0xA9, 0x49, 0x97, 0x5C, 0x5A, 0xE3, 0x36,
		0xD4, 0xBC, 0x04, 0xFC, 0x17, 0x28, 0xEA, 0x06
		};
/** X coordinate of CA public key */
static uint8_t test_rec_ca_pubKey_x_bp256r1[LENGTH_DOMAIN_PARAMS_256] = {
		0x4E, 0x63, 0x43, 0xA0, 0xD2, 0x92, 0x9C, 0x29,
		0x8E, 0xE6, 0xF4, 0x88, 0xA1, 0x1D, 0x85, 0x27,
		0x0D, 0x8D, 0x40, 0x38, 0x78, 0xDB, 0x77, 0xA0,
		0xCB, 0xE1, 0x6D, 0x3D, 0x90, 0xC7, 0x42, 0x64
		};
/** Y coordinate of CA public key */
static uint8_t test_rec_ca_pubKey_y_bp256r1[LENGTH_DOMAIN_PARAMS_256] = {
		0xCC, 0x6C, 0x09, 0xDE, 0x8C, 0x89, 0xFE, 0xFA,
		0xB9, 0x29, 0x33, 0xE1, 0xCA, 0xA9, 0xDE, 0xF6,
		0xD1, 0x5D, 0x8E, 0xB3, 0xA2, 0x34, 0x12, 0xDF,
		0x8F, 0x00, 0x31, 0x9A, 0x03, 0x2C, 0xD9, 0x9F
		};
/** X coordinate of reconstructed public key */
static uint8_t test_rec_pubKey_x_exp_bp256r1[LENGTH_DOMAIN_PARAMS_256] = {
		0xCF, 0x45, 0x43, 0x07, 0x6C, 0xEC, 0x6C, 0x5B,
		0x6B, 0x08, 0xC8, 0xBC, 0x77, 0x76, 0xC4, 0x80,
		0x50, 0xE7, 0x00, 0x34, 0xD6, 0x2D, 0x6D, 0x43,
		0xB4, 0x08, 0xF4, 0x3E, 0x26, 0x17, 0xC7, 0x38
		};
/** Y coordinate of reconstructed public key */
static uint8_t test_rec_pubKey_y_exp_bp256r1[LENGTH_DOMAIN_PARAMS_256] = {
		0xF6, 0x50, 0xDE, 0x55, 0xAA, 0x43, 0x61, 0x2F,
		0x7F, 0x02, 0xC9, 0x75, 0xA8, 0x8B, 0x55, 0xDA,
		0xA0, 0x59, 0x64, 0xBB, 0xC8, 0x8C, 0x53, 0xA2,
		0xFE, 0x7B, 0x9E, 0x0C, 0xEA, 0x40, 0x81, 0x0C
		};
#endif
